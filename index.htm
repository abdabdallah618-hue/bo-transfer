<!DOCTYPE html>
<html lang="ar"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Users Transfer</title>
<link href="Users%20Transfer_files/css2.css" rel="stylesheet">
<style>
body {
    font-family: 'Cairo', system-ui, Arial, sans-serif;
    direction: rtl;
    margin: 0;
    padding: 0;
    min-height: 100vh;
    min-width: 100vw;
    width: 100vw;
    height: 100vh;
    background: linear-gradient(120deg, #232526 0%, #1e293b 100%);
    color: #e3e8ee;
    min-height: 100vh;
    min-width: 100vw;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
.container {
    width: 100vw;
    height: 100vh;
    min-height: 100vh;
    min-width: 100vw;
    background: transparent;
    border-radius: 0;
    box-shadow: none;
    padding: 0 0 0 0;
    border: none;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    position: static;
}
h2 {
    text-align: center;
    margin-bottom: 32px;
    color: #38bdf8;
    font-size: 3vw;
    font-weight: 800;
    letter-spacing: 1px;
    text-shadow: 0 2px 16px #38bdf855;
}
label {
    color: #38bdf8;
    font-weight: 700;
    margin-bottom: 6px;
    display: block;
    font-size: 1.08rem;
}
textarea, input[type="file"] {
    width: 100%;
    margin-bottom: 18px;
    background: #1e293b;
    border: 1.5px solid #334155;
    border-radius: 12px;
    color: #e3e8ee;
    padding: 14px;
    font-size: 1.05rem;
    transition: border 0.2s, box-shadow 0.2s;
    box-shadow: 0 1.5px 8px 0 #38bdf822;
    resize: both;
}
#raw {
  resize: both !important;
  min-width: 0 !important;
  min-height: 0 !important;
  max-width: none !important;
  max-height: none !important;
  width: 1200px !important;
  height: 240px !important;
  box-sizing: border-box;
  margin: 24px 0 24px 0;
  display: block;
}
.excel-upload-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-bottom: 18px;
    width: 100%;
}
.excel-upload-label {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    background: linear-gradient(90deg,#38bdf8 0%,#0ea5e9 100%);
    color: #fff;
    padding: 8px 0;
    border-radius: 14px;
    font-size: 1.1rem;
    font-weight: 700;
    cursor: pointer;
    box-shadow: 0 2px 12px #38bdf822;
    margin-bottom: 10px;
    transition: background 0.2s, box-shadow 0.2s, transform 0.2s;
    width: 270px;
    min-width: 200px;
}
.excel-upload-label:hover {
    background: linear-gradient(90deg,#0ea5e9 0%,#38bdf8 100%);
    box-shadow: 0 4px 24px #38bdf855;
    transform: translateY(-2px) scale(1.04);
}
.excel-upload-label svg {
    width: 32px;
    height: 32px;
    fill: #fff;
}
.excel-upload-input {
    display: none;
}
textarea:focus, input[type="file"]:focus {
    border: 1.5px solid #38bdf8;
    outline: none;
    box-shadow: 0 2px 12px 0 #38bdf855;
}
button {
    padding: 13px 32px;
    margin: 8px 4px;
    cursor: pointer;
    transition: 0.18s;
    background: linear-gradient(90deg,#38bdf8 0%,#0ea5e9 100%);
    color: #fff;
    border: none;
    border-radius: 14px;
    font-size: 1.3rem;
    font-weight: 700;
    box-shadow: 0 2px 12px #38bdf822;
    letter-spacing: 0.5px;
}
button:hover {
    background: linear-gradient(90deg,#0ea5e9 0%,#38bdf8 100%);
    box-shadow: 0 4px 24px #38bdf855;
    transform: translateY(-2px) scale(1.04);
}
.buttons-wrapper {
    text-align: center;
    margin-bottom: 20px;
}
table {
    width: 80vw;
    max-width: 1100px;
    min-width: 350px;
    margin: 32px auto 0 auto;
    border-collapse: collapse;
    background: #1e293b;
    box-shadow: 0 0 18px #38bdf822;
    border-radius: 16px;
    overflow: hidden;
}
th, td {
    border: 1px solid #334155;
    padding: 14px 12px;
    text-align: center;
    font-size: 1.1rem;
    min-width: 100px;
    background: #232931;
    color: #38bdf8;
    font-weight: 700;
}
input[type="text"].zone-new {
    width: 100%;
    padding: 8px;
    border-radius: 8px;
    border: 1.5px solid #334155;
    background: #1e293b;
    color: #e3e8ee;
    font-size: 1.05rem;
}
.separator {
    height: 2.5px;
    background: linear-gradient(90deg,#38bdf8 0%,#0ea5e9 100%);
    margin: 44px 0 36px 0;
    border-radius: 2px;
    opacity: 0.8;
}
@media (max-width: 900px) {
    .container {
        padding: 18px 6px 18px 6px;
        width: 99vw;
        min-height: 99vh;
    }
    h2 {
        font-size: 1.3rem;
    }
    button {
        padding: 10px 10px;
        font-size: 0.95rem;
    }
    th, td {
        font-size: 0.9rem;
        padding: 7px 2px;
    }
}
h2 {
    text-align: center;
    margin-bottom: 28px;
    color: #00d2ff;
    font-size: 2.2rem;
    font-weight: 700;
    letter-spacing: 1px;
    text-shadow: 0 2px 16px #00d2ff44;
}
textarea, input[type="file"] {
    width: 100%;
    margin-bottom: 16px;
    background: #232931;
    border: 1px solid #393e46;
    border-radius: 10px;
    color: #f5f6fa;
    padding: 12px;
    font-size: 1rem;
    transition: border 0.2s;
    resize: both;
}
textarea:focus, input[type="file"]:focus {
    border: 1.5px solid #00d2ff;
    outline: none;
}
button {
    padding: 12px 28px;
    margin: 7px 4px;
    cursor: pointer;
    transition: 0.2s;
    background: linear-gradient(90deg,#00d2ff 0%,#3a7bd5 100%);
    color: #fff;
    border: none;
    border-radius: 12px;
    font-size: 1rem;
    font-weight: 600;
    box-shadow: 0 2px 12px rgba(0,210,255,0.12);
    letter-spacing: 0.5px;
}
button:hover {
    background: linear-gradient(90deg,#3a7bd5 0%,#00d2ff 100%);
    box-shadow: 0 4px 24px rgba(0,210,255,0.18);
    transform: translateY(-2px) scale(1.03);
}
.buttons-wrapper {
    text-align: center;
    margin-bottom: 18px;
}
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 18px;
    background: #232931;
    box-shadow: 0 0 18px rgba(0,210,255,0.08);
    border-radius: 10px;
    overflow: hidden;
}
th, td {
    border: 1px solid #393e46;
    padding: 12px 8px;
    text-align: center;
    font-size: 1rem;
}
th {
    background: #393e46;
    color: #00d2ff;
    font-weight: 700;
}
input[type="text"].zone-new {
    width: 100%;
    padding: 7px;
    border-radius: 7px;
    border: 1px solid #393e46;
    background: #232931;
    color: #f5f6fa;
    font-size: 1rem;
}
.separator {
    height: 2px;
    background: linear-gradient(90deg,#00d2ff 0%,#3a7bd5 100%);
    margin: 40px 0 32px 0;
    border-radius: 2px;
    opacity: 0.7;
}
@media (max-width: 600px) {
    .container {
        padding: 18px 6px 18px 6px;
    }
    h2 {
        font-size: 1.3rem;
    }
    button {
        padding: 10px 10px;
        font-size: 0.95rem;
    }
    th, td {
        font-size: 0.9rem;
        padding: 7px 2px;
    }
}
</style>
</head>
<body>

<div class="container">
    <!-- Popup for assign name before applying new zones -->
    <div id="assignNamePopup" style="display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(30,41,59,0.55);z-index:1001;align-items:center;justify-content:center;">
        <div style="background:#1e293b;padding:32px 24px 24px 24px;border-radius:16px;box-shadow:0 4px 32px #38bdf855;max-width:90vw;width:350px;text-align:center;">
            <h3 style="color:#38bdf8;margin-bottom:18px;font-size:1.2rem;">Please enter the assign name</h3>
            <input id="assignNameInput" type="text" placeholder="Enter assign name here" style="width:90%;padding:10px 8px;border-radius:8px;border:1.5px solid #334155;background:#232931;color:#e3e8ee;font-size:1rem;margin-bottom:18px;">
            <div>
                <button id="assignNameOkBtn" style="margin-left:8px;">OK</button>
                <button id="assignNameCancelBtn" style="background:#64748b;">Cancel</button>
            </div>
        </div>
    </div>
    <!-- Popup for new zone confirmation -->
    <div id="zoneConfirmPopup" style="display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(30,41,59,0.55);z-index:1000;align-items:center;justify-content:center;">
        <div style="background:#1e293b;padding:32px 24px 24px 24px;border-radius:16px;box-shadow:0 4px 32px #38bdf855;max-width:90vw;width:350px;text-align:center;">
            <h3 style="color:#38bdf8;margin-bottom:18px;font-size:1.2rem;">Are you sure about the new zone?</h3>
            <div>
                <button id="zoneConfirmYes" style="margin-left:8px;">Yes</button>
                <button id="zoneConfirmNo" style="background:#64748b;">No</button>
            </div>
        </div>
    </div>
    <h2>Users Transfer</h2>
    <!-- النظام القديم -->
        <label for="raw" style="font-weight:600; color:#00d2ff;">Users Transfer:</label>
        <div class="raw-wrap">
            <div class="arrange-btn-bar">
                <button id="arrangeColumnsBtn" class="arrange-btn" title="ترتيب الأعمدة تلقائياً">
                    <span class="arrange-btn-icon">🔄</span>
                    <span class="arrange-btn-text">ترتيب الأعمدة</span>
                </button>
            </div>
            <textarea id="raw" placeholder="ألصق هنا بياناتك (3 أعمدة: عقد، زون قديم، زون جديد)" cols="96" rows="16">FBS11FAT7PORT3ah	FBS0011	FBS0011-7
FBS11FAT16PORT2	FBS0011	FBS0011-7
FBS11FAT6PORT6ah	FBS0011	FBS0011-7
FBS11FAT18PORT14ah	FBS0011	FBS0011-7
FBS11FAT7PORT4ah	FBS0011	FBS0011-7
FAT11-11-3	FBS0011	FBS0011-7
FBS11FAT5PORT3ah	FBS0011	FBS0011-7
FBS11FAT29PORT9ah	FBS0011	FBS0011-7
FBS11FAT14PORT10ah	FBS0011	FBS0011-7
FAT11-11-1	FBS0011	FBS0011-7
FBS11FAT7PORT2ah	FBS0011	FBS0011-7
FBS11FAT18PORT15ah	FBS0011	FBS0011-7
FBS11FAT7PORT5ah	FBS0011	FBS0011-7</textarea>
        </div>
<style>
.raw-wrap {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 24px auto 24px auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
}
.arrange-btn-bar {
    width: 100%;
    display: flex;
    justify-content: center;
    margin-bottom: 6px;
}
#raw {
    resize: both !important;
    min-width: 320px !important;
    min-height: 120px !important;
    max-width: 100vw !important;
    max-height: 60vh !important;
    width: 100%;
    height: 240px;
    box-sizing: border-box;
    margin: 0;
    display: block;
    background: linear-gradient(120deg,#232526 0%,#1e293b 100%);
    border: 2.5px solid #00e0b8;
    border-radius: 18px;
    color: #e3e8ee;
    padding: 18px 18px 18px 48px;
    font-size: 1.13rem;
    font-family: 'Cairo', system-ui, Arial, sans-serif;
    box-shadow: 0 4px 32px #00e0b822, 0 1.5px 8px 0 #00e0b822;
    transition: border 0.2s, box-shadow 0.2s;
    outline: none;
}
#raw:focus {
    border: 2.5px solid #ffb300;
    box-shadow: 0 6px 32px #ffb30055, 0 2px 12px #00e0b855;
}
.arrange-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 6px 18px 6px 14px;
    font-size: 1.01rem;
    font-weight: 800;
    background: linear-gradient(90deg,#00e0b8 0%,#ffb300 100%);
    color: #232526;
    border: none;
    border-radius: 22px;
    box-shadow: 0 2px 12px #00e0b822, 0 1.5px 8px 0 #ffb30022;
    cursor: pointer;
    transition: background 0.18s, box-shadow 0.18s, transform 0.18s;
    position: relative;
    margin: 0 auto 0 auto;
    outline: none;
    min-width: 90px;
    letter-spacing: 0.5px;
    z-index: 2;
}
.arrange-btn:hover, .arrange-btn:focus {
    background: linear-gradient(90deg,#ffb300 0%,#00e0b8 100%);
    color: #fff;
    box-shadow: 0 8px 32px #ffb30077, 0 2px 12px #00e0b855;
    transform: translateY(-2px) scale(1.08);
}
.arrange-btn-icon {
    font-size: 1.25em;
    filter: drop-shadow(0 2px 8px #00e0b8aa);
    margin-left: 2px;
    transition: filter 0.2s;
}
.arrange-btn:hover .arrange-btn-icon, .arrange-btn:focus .arrange-btn-icon {
    filter: drop-shadow(0 2px 8px #ffb300aa);
}
.arrange-btn-text {
    font-family: inherit;
    font-weight: 800;
    letter-spacing: 0.5px;
    font-size: 1.01em;
}
@media (max-width: 700px) {
    .raw-wrap { max-width: 99vw; gap: 4px; }
    #raw { font-size: 0.98rem; padding: 12px 12px 12px 36px; }
    .arrange-btn { font-size: 0.93rem; padding: 6px 10px 6px 8px; min-width: 70px; }
}
</style>
<script>
document.getElementById('arrangeColumnsBtn').addEventListener('click', function(){
    const textarea = document.getElementById('raw');
    let text = textarea.value;
    if(!text.trim()) return;
    // إزالة الفراغات الزائدة والأسطر الفارغة
    text = text.replace(/[ \t]+/g, ' ').replace(/\r/g, '').replace(/\n{2,}/g, '\n');
    let rawLines = text.split(/\n/).map(sanitizeToken).filter(Boolean);

    // معالجة الأعمدة الملتصقة: إذا وُجد عمود فيه ZoneZone (مثلاً FBG1498-2FBG1498-3)
    const zonePattern = /([A-Za-z\u0621-\u064A]{3}\d{3,4}(?:-[0-9A-Za-z]+)?)/g;
    rawLines = rawLines.map(line => {
        // إذا كان السطر يحوي عمودين فقط لكن الثاني طويل جداً أو فيه ZoneZone
        const tokens = line.split(/\s+/).filter(Boolean);
        if(tokens.length === 2 && /([A-Za-z\u0621-\u064A]{3}\d{3,4}(?:-[0-9A-Za-z]+)?){2,}/.test(tokens[1])){
            // حاول الفصل
            const zones = tokens[1].match(zonePattern);
            if(zones && zones.length === 2){
                return tokens[0] + '\t' + zones[0] + '\t' + zones[1];
            }
        }
        return line;
    });

    // إذا كانت معظم الأسطر أحادية العمود (عمودي)، حولها لأفقية
    const singleColCount = rawLines.filter(l => l.split(/\s+/).filter(Boolean).length === 1).length;
    if(singleColCount >= rawLines.length * 0.7 && rawLines.length >= 3){
        // عمودي: كل 3 أسطر = صف أفقي
        let arranged = [];
        for(let i=0; i<rawLines.length; i+=3){
            const group = rawLines.slice(i, i+3);
            if(group.length === 3){
                arranged.push(group.join('\t'));
            } else {
                arranged = arranged.concat(group); // أضف الباقي كما هو
            }
        }
        textarea.value = arranged.join('\n');
    } else {
        // أفقية أو مختلطة: لا تغيّر
        textarea.value = rawLines.join('\n');
    }
});
</script>
    <div class="buttons-wrapper">
    <button id="togglePreviewOld">Preview EXCEL Transfer NEW</button>
        <!-- Popup for Created by -->
        <div id="createdByPopup" style="display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(30,41,59,0.55);z-index:1000;align-items:center;justify-content:center;">
            <div style="background:#1e293b;padding:32px 24px 24px 24px;border-radius:16px;box-shadow:0 4px 32px #38bdf855;max-width:90vw;width:350px;text-align:center;">
                <h3 style="color:#38bdf8;margin-bottom:18px;font-size:1.3rem;">Assign <span style="color:#0ea5e9">Created by</span></h3>
                <input id="createdByInput" type="text" placeholder="Enter name here" style="width:90%;padding:10px 8px;border-radius:8px;border:1.5px solid #334155;background:#232931;color:#e3e8ee;font-size:1rem;margin-bottom:18px;" value="ss">
                <div>
                    <button id="createdByOkBtn" style="margin-left:8px;">OK</button>
                    <button id="createdByCancelBtn" style="background:#64748b;">Cancel</button>
                </div>
            </div>
        </div>
    <button id="exportExcelOld">Download Excel</button>
    <button id="changeCreatedByOld">Change Created by Assign</button>
    </div>
    <div id="tblWrapOld" style="display:none;"></div>
    <div class="separator"></div>
    <!-- النظام الجديد -->
    <label for="excelFile" style="font-weight:600; color:#00d2ff;display:block;text-align:center;">ALL users Excel:</label>
    <div class="excel-upload-wrapper">
        <label for="excelFile" class="excel-upload-label">
            <svg viewBox="0 0 24 24"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 8.36 4 5.33 6.59 4.65 10.04 2.76 10.36 1.25 12.03 1.25 14c0 2.21 1.79 4 4 4h13.5c2.21 0 4-1.79 4-4 0-1.97-1.51-3.64-3.4-3.96zM12 19c-1.1 0-2-.9-2-2h4c0 1.1-.9 2-2 2zm-1-7V8h2v4h3l-4 4-4-4h3z"></path></svg>
            Upload Excel File
        </label>
        <input type="file" id="excelFile" class="excel-upload-input" accept=".xlsx,.xls">
        <div id="excelUploadedMsg" style="display:none;margin-top:8px;color:#22c55e;font-weight:700;font-size:1.05rem;text-align:center;">
            <svg style="vertical-align:middle;width:20px;height:20px;fill:#22c55e;margin-left:6px;" viewBox="0 0 24 24"><path d="M9 16.2l-3.5-3.5 1.4-1.4L9 13.4l7.1-7.1 1.4 1.4z"></path></svg>
            Excel file uploaded successfully
        </div>
    </div>
    <div class="buttons-wrapper">
    <button id="loadExcel">New Zone Transfer</button>
    </div>
    <div id="zoneMapping"></div>
    <div class="buttons-wrapper">
    <button id="applyZones">Apply New Zones</button>
    </div>
    <div class="separator"></div>
    <div class="buttons-wrapper">
    <button id="togglePreviewNew">Preview Final Table</button>
    <button id="changeCreatedByNew">Change Created by Assign</button>
    <button id="exportExcelNew">Download Excel</button>
    </div>
    <div id="tblWrapNew" style="display:none;"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
<script>
// Show confirmation when Excel file is uploaded
const excelInput = document.getElementById('excelFile');
const excelUploadedMsg = document.getElementById('excelUploadedMsg');
excelInput.addEventListener('change', function() {
    if (this.files && this.files.length > 0) {
        excelUploadedMsg.style.display = 'block';
    } else {
        excelUploadedMsg.style.display = 'none';
    }
});

// =================== النظام القديم ===================
let previewVisibleOld = false;
let createdByOld = 'غير مخصص';

function cleanZeros(token){
    return token ? token.replace(/([A-Za-z\u0621-\u064A]+)0+(\d+)/g, '$1$2') : token;
}

function addZeros(zone) {
    // يجعل الزون 3 أحرف و4 أرقام (FBG12 → FBG0012)
    if (!zone) return zone;
    // يلتقط 3 أحرف متبوعة بأي أرقام أو باقي النص
    const match = zone.match(/^([A-Za-z\u0621-\u064A]{3})(\d{1,4})(.*)$/);
    if (match) {
        const prefix = match[1];
        const numbers = match[2].padStart(4, '0');
        const rest = match[3] || '';
        return prefix + numbers + rest;
    }
    return zone;
}

// إزالة المحارف الخفية (مسافات غير منقطعة / علامات اتجاه) وتوحيد المسافات
function sanitizeToken(str){
    if(!str) return '';
    return str
        .replace(/\u00A0/g,' ')              // nbsp -> space
        .replace(/[\u200e\u200f\u202a-\u202e\u2066-\u2069]/g,'') // علامات اتجاه
        .trim();
}

function parseLinesOld(text, createdBy){
    let errorUsers = [];
    const rawLines = text.split(/\r?\n/).map(sanitizeToken).filter(Boolean);
    const rows = [];
    let buffer = [];
    for(let i=0; i<rawLines.length; i++){
        const line = rawLines[i];
        const tokens = line.split(/\s+/).filter(Boolean);
        if(tokens.length === 1){
            buffer.push(tokens[0]);
            if(buffer.length === 3){
                // كل 3 أسطر = صف واحد
                const [contract, zoneOldRaw, zoneNewRaw] = buffer;
                const zoneOld = addZeros(zoneOldRaw);
                const zoneOriginalToken = zoneNewRaw;
                const zone = addZeros(zoneOriginalToken);
                const fdt = cleanZeros(zoneOriginalToken);
                let error = false;
                if(zoneOld && zone) {
                    let z1 = zone.trim().toUpperCase();
                    let z2 = zoneOld.trim().toUpperCase();
                    const base1 = z1.replace(/-\d+$/, '');
                    const base2 = z2.replace(/-\d+$/, '');
                    if(!(z1.includes(z2) || z2.includes(z1) || base1 === base2)) {
                        error = true;
                        errorUsers.push(contract + ' ('+ z2 + ' → ' + z1 +')');
                    }
                }
                rows.push({ contract, zone, fdt, createdBy, error });
                buffer = [];
            }
        } else if(tokens.length >= 3){
            // سطر واحد فيه 3 أعمدة أو أكثر
            const contract = tokens[0];
            const zoneOldRaw = tokens[1];
            const zoneNewRaw = tokens[tokens.length - 1];
            const zoneOld = addZeros(zoneOldRaw);
            const zoneOriginalToken = zoneNewRaw;
            const zone = addZeros(zoneOriginalToken);
            const fdt = cleanZeros(zoneOriginalToken);
            let error = false;
            if(zoneOld && zone) {
                let z1 = zone.trim().toUpperCase();
                let z2 = zoneOld.trim().toUpperCase();
                const base1 = z1.replace(/-\d+$/, '');
                const base2 = z2.replace(/-\d+$/, '');
                if(!(z1.includes(z2) || z2.includes(z1) || base1 === base2)) {
                    error = true;
                    errorUsers.push(contract + ' ('+ z2 + ' → ' + z1 +')');
                }
            }
            rows.push({ contract, zone, fdt, createdBy, error });
            buffer = [];
        }
        // إذا tokens.length == 2 أو غير ذلك، تجاهل السطر
    }
    if(errorUsers.length > 0) {
        showErrorPopup(errorUsers);
    }
    return rows;
}

// نافذة منبثقة لعرض اليوزريات التي بها مشكلة
function showErrorPopup(users) {
    let popup = document.createElement('div');
    popup.style.position = 'fixed';
    popup.style.top = '0';
    popup.style.left = '0';
    popup.style.width = '100vw';
    popup.style.height = '100vh';
    popup.style.background = 'rgba(30,41,59,0.7)';
    popup.style.zIndex = '2000';
    popup.style.display = 'flex';
    popup.style.alignItems = 'center';
    popup.style.justifyContent = 'center';
    popup.innerHTML = `<div style="background:#1e293b;padding:32px 24px 24px 24px;border-radius:16px;box-shadow:0 4px 32px #38bdf855;max-width:90vw;width:400px;text-align:center;">
        <h3 style='color:#f87171;margin-bottom:18px;font-size:1.2rem;'>لا يمكن نقل المستخدمين التالية أسماؤهم إلى زون مختلفة:</h3>
        <div style='color:#fff;margin-bottom:18px;max-height:200px;overflow:auto;'>${users.map(u=>`<div>${u}</div>`).join('')}</div>
        <button onclick='this.parentNode.parentNode.remove()' style='margin-top:8px;padding:7px 18px;border-radius:8px;background:#f87171;color:#fff;font-weight:700;border:none;cursor:pointer;'>إغلاق</button>
    </div>`;
    document.body.appendChild(popup);
}

function buildTableOld(rows){
    if(rows.length === 0){
        document.getElementById('tblWrapOld').innerHTML = '<p>لا توجد بيانات.</p>';
        return;
    }
        let html = '<table id="mainTableOld"><thead><tr>' +
                   '<th>Contract</th><th>Zone</th><th>FDT</th><th>Created by</th>' +
               '</tr></thead><tbody>';
    rows.forEach(r=>{
        const rowClass = r.error ? ' class="row-error"' : '';
          html += `<tr${rowClass}>
                          <td>${r.contract}</td>
                          <td>${r.zone}</td>
                          <td>${r.fdt}</td>
                          <td><input type="text" value="${r.createdBy}"></td>
                        
                      </tr>`;
    });
    html += '</tbody></table>';
    document.getElementById('tblWrapOld').innerHTML = html;
}


// Popup logic
const popup = document.getElementById('createdByPopup');
const createdByInput = document.getElementById('createdByInput');
const okBtn = document.getElementById('createdByOkBtn');
const cancelBtn = document.getElementById('createdByCancelBtn');

document.getElementById('togglePreviewOld').addEventListener('click', function(){
    const text = document.getElementById('raw').value.trim();
    if(!previewVisibleOld){
        if(!text){
            alert('ألصق البيانات أولاً');
            return;
        }
        if(!createdByOld || createdByOld === 'غير مخصص'){
            popup.style.display = 'flex';
            createdByInput.value = '';
            createdByInput.focus();
            // Handle OK
            okBtn.onclick = function() {
                let val = createdByInput.value.trim();
                createdByOld = val === '' ? 'غير مخصص' : val;
                popup.style.display = 'none';
                const rows = parseLinesOld(text, createdByOld);
                buildTableOld(rows);
                document.getElementById('tblWrapOld').style.display = 'block';
                document.getElementById('togglePreviewOld').textContent = 'Hide Preview';
                previewVisibleOld = true;
            };
            // Handle Cancel
            cancelBtn.onclick = function() {
                popup.style.display = 'none';
            };
            return;
        }
        const rows = parseLinesOld(text, createdByOld);
        buildTableOld(rows);
        document.getElementById('tblWrapOld').style.display = 'block';
        this.textContent = 'إخفاء المعاينة';
        previewVisibleOld = true;
    } else {
        document.getElementById('tblWrapOld').style.display = 'none';
    this.textContent = 'EXCEL Transfer NEW';
        previewVisibleOld = false;
    }
});

document.getElementById('changeCreatedByOld').addEventListener('click', function(){
    const table = document.getElementById('mainTableOld');
    if(!table){ alert('لا توجد بيانات لتغيير Created by!'); return; }
    const newName = prompt('اكتب الاسم الجديد لـ Created by:', '');
    if(newName === null) return;
    const finalName = newName.trim() === '' ? 'غير مخصص' : newName.trim();
    table.querySelectorAll('tbody tr').forEach(tr=>{
        const input = tr.querySelector('td:nth-child(4) input');
        if(input) input.value = finalName;
    });
    createdByOld = finalName;
});

document.getElementById('exportExcelOld').addEventListener('click', function(){
    const table = document.getElementById('mainTableOld');
    if(!table){ alert('لا توجد بيانات للتحميل!'); return; }
    const rows = Array.from(table.querySelectorAll('tbody tr')).map(tr => {
        const tds = tr.querySelectorAll('td');
            // الأعمدة: 0 Contract, 1 Zone, 2 FDT, 3 Created by (input)
            return [tds[0].textContent, tds[1].textContent, tds[2].textContent, tds[3].querySelector('input').value];
    });
    const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([["Contract","Zone","FDT","Created by"], ...rows]);
    XLSX.utils.book_append_sheet(wb, ws, "Table");
    XLSX.writeFile(wb, "OldData.xlsx");
});

// =================== النظام الجديد ===================
let rawDataNew = [];
let previewVisibleNew = false;
let createdByNew = 'غير مخصص';

// مصفوفة Zones مسبقة
const predefinedZones = {
  "FMS0464": "FMS0464-3",
  "FMS0465": "FMS0465-3",
  "FMS0466": "FMS0466-2",
  "FMS0467": "FMS0467-2",
  "FMS0468": "FMS0468-2",
  "FMS0469": "FMS0469-3",
  "FMS0470": "FMS0470-2"
};

// رفع Excel واستخراج Device Username و Zone
document.getElementById('loadExcel').addEventListener('click', () => {
    const fileInput = document.getElementById('excelFile');
    if(fileInput.files.length === 0){ alert('اختر ملف Excel أولاً!'); return; }
    const file = fileInput.files[0];
    const reader = new FileReader();
    reader.onload = function(e){
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, {type: 'array'});
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, {header:1});

        const headers = jsonData[0].map(h=>h.toString().trim().toLowerCase());
        const deviceIndex = headers.findIndex(h => h === 'device username');
        const zoneIndex = headers.findIndex(h => h === 'zone');

        if(deviceIndex === -1 || zoneIndex === -1){ alert('تأكد أن الملف يحتوي على Device Username و Zone'); return; }

        rawDataNew = jsonData.slice(1).map(row => ({device: row[deviceIndex]||'', zone: row[zoneIndex]||''}));
        buildZoneMapping(rawDataNew);
    };
    reader.readAsArrayBuffer(file);
});

// إنشاء جدول تعديل Zone مع القيم المسبقة
function buildZoneMapping(data){
    const uniqueZones = [...new Set(data.map(d => d.zone))];
    let html = '<table><thead><tr><th>Zone القديم</th><th>Zone الجديد</th></tr></thead><tbody>';
    uniqueZones.forEach(z=>{
        const newZone = ""; // دائماً فارغ ليكتب المستخدم الزون الجديد
        html += `<tr>
                    <td>${z}</td>
                    <td><input class="zone-new" type="text" value="${newZone}"></td>
                 </tr>`;
    });
    html += '</tbody></table>';
    document.getElementById('zoneMapping').innerHTML = html;
}

// تطبيق التغييرات على جميع Device Username
document.getElementById('applyZones').addEventListener('click', ()=>{
    const table = document.querySelector('#zoneMapping table');
    if(!table){ alert('لا توجد بيانات Zones لتطبيقها!'); return; }
    // Show assign name popup first
    const assignPopup = document.getElementById('assignNamePopup');
    const assignInput = document.getElementById('assignNameInput');
    assignPopup.style.display = 'flex';
    assignInput.value = '';
    assignInput.focus();
    document.getElementById('assignNameOkBtn').onclick = function() {
        const assignVal = assignInput.value.trim();
        if(assignVal === '') { assignInput.focus(); return; }
        assignPopup.style.display = 'none';
        // Show confirmation popup after assign name
        const zonePopup = document.getElementById('zoneConfirmPopup');
        zonePopup.style.display = 'flex';
        document.getElementById('zoneConfirmYes').onclick = function() {
            const rows = table.querySelectorAll('tbody tr');
            const zoneMap = {};
            rows.forEach(tr=>{
                const oldZone = tr.cells[0].textContent;
                const newZone = tr.querySelector('input').value.trim();
                if(newZone) zoneMap[oldZone] = newZone;
            });
            rawDataNew = rawDataNew.map(r=>({...r, zone: zoneMap[r.zone]||r.zone, assign: assignVal}));
            createdByNew = assignVal; // اجعل createdByNew هو نفس assign
            zonePopup.style.display = 'none';
            alert('تم تطبيق الـ Zones الجديدة بنجاح!');
        };
        document.getElementById('zoneConfirmNo').onclick = function() {
            zonePopup.style.display = 'none';
        };
    };
    document.getElementById('assignNameCancelBtn').onclick = function() {
        assignPopup.style.display = 'none';
    };
});

// معاينة الجدول النهائي
document.getElementById('togglePreviewNew').addEventListener('click', function(){
    if(!previewVisibleNew){
        if(rawDataNew.length === 0){ alert('لا توجد بيانات لعرضها!'); return; }
        if(!createdByNew){
            const inputName = prompt('اكتب اسم Created by:', '');
            createdByNew = inputName===null||inputName.trim()===''?'غير مخصص':inputName.trim();
        }
        buildPreviewTableNew();
        document.getElementById('tblWrapNew').style.display='block';
        this.textContent='إخفاء المعاينة';
        previewVisibleNew=true;
    } else {
        document.getElementById('tblWrapNew').style.display='none';
        this.textContent='معاينة الجدول النهائي';
        previewVisibleNew=false;
    }
});

// بناء جدول Preview الجديد مع FDT من Zone الجديد
function buildPreviewTableNew(){
    const htmlRows = rawDataNew.map(r => {
        const fdtValue = cleanZeros(r.zone); // FDT يعتمد على Zone الجديد
        return `<tr>
            <td>${r.device}</td>
            <td>${r.zone}</td>
            <td><input type="text" value="${fdtValue}"></td>
            <td><input type="text" value="${createdByNew}"></td>
        </tr>`;
    }).join('');
    const html = `<div style="display:flex;justify-content:center;width:100%;"><table id="mainTableNew"><thead>
        <tr><th>Contract</th><th>Zone</th><th>FDT</th><th>Created by</th></tr>
    </thead><tbody>${htmlRows}</tbody></table></div>`;
    document.getElementById('tblWrapNew').innerHTML=html;
}

// تغيير Created by
document.getElementById('changeCreatedByNew').addEventListener('click', ()=>{
    const table=document.getElementById('mainTableNew');
    if(!table){ alert('لا توجد بيانات لتغيير Created by!'); return; }
    // Show assign popup
    const assignPopup = document.getElementById('assignNamePopup');
    const assignInput = document.getElementById('assignNameInput');
    assignPopup.style.display = 'flex';
    assignInput.value = '';
    assignInput.focus();
    document.getElementById('assignNameOkBtn').onclick = function() {
        const assignVal = assignInput.value.trim();
        if(assignVal === '') { assignInput.focus(); return; }
        assignPopup.style.display = 'none';
        table.querySelectorAll('tbody tr').forEach(tr=>{
            const input = tr.querySelector('td:nth-child(4) input');
            if(input) input.value = assignVal;
        });
        createdByNew = assignVal;
    };
    document.getElementById('assignNameCancelBtn').onclick = function() {
        assignPopup.style.display = 'none';
    };
});

// تصدير Excel النهائي
document.getElementById('exportExcelNew').addEventListener('click', ()=>{
    const table = document.getElementById('mainTableNew');
    if(!table){ alert('لا توجد بيانات لتصديرها!'); return; }
    const rows = Array.from(table.querySelectorAll('tbody tr')).map(tr=>{
        const tds = tr.querySelectorAll('td');
        return [
            tds[0].textContent,
            tds[1].textContent,
            tds[2].querySelector('input').value,
            tds[3].querySelector('input').value
        ];
    });
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.aoa_to_sheet([["Contract","Zone","FDT","Created by"], ...rows]);
    XLSX.utils.book_append_sheet(wb, ws, "Table");
    XLSX.writeFile(wb, "FinalData.xlsx");
});
</script>



</body></html>
